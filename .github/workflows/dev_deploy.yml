name: Deploy to Dev

on:
  push:
    branches:
      - develop

env:
  AWS_REGION: ap-northest-2
  ECR_REPOSITORY: tpt/dev-server

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 코드 가져오기
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      # JDK 설정
      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: 'gradle'  # Gradle 캐시 자동 처리

      # Gradle 빌드
      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew clean build -x test --no-daemon
          cp build/libs/*-SNAPSHOT.jar app.jar

      # AWS 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: true  # 보안 강화

      # ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      # Docker 빌드 및 푸시
      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # 빌드
          docker build -t tpt-server .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest-dev
          
          # 푸시
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest-dev
          
          # 빌드 정보 출력
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

