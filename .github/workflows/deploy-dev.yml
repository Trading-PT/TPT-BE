# 워크플로우 이름
name: Deploy to Dev

# 트리거 조건
on:
  # develop 브랜치에 푸시될 때 실행
  push:
    branches: [ develop ]

# 환경변수 정의
env:
  # AWS 리전 (서울)
  AWS_REGION: ap-northeast-2
  # ECR 리포지토리 이름
  ECR_REPOSITORY: tpt-app

# 작업 정의
jobs:
  deploy:
    # Ubuntu 최신 버전에서 실행
    runs-on: ubuntu-latest
    
    # 작업 단계
    steps:
      # 소스코드 체크아웃
      - uses: actions/checkout@v4
      
      # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'  # OpenJDK 배포판
          cache: 'gradle'          # Gradle 의존성 캐시
      
      # JAR 파일 빌드
      - name: Build JAR
        run: |
          # gradlew에 실행 권한 부여
          chmod +x gradlew
          # 클린 빌드 실행 (테스트 제외)
          ./gradlew clean build -x test
          # 빌드된 JAR 파일을 루트로 복사 (Docker에서 사용)
          cp build/libs/*-SNAPSHOT.jar app.jar
      
      # AWS 인증 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # GitHub Secrets에서 AWS 자격 증명 사용
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      # ECR 로그인
      - name: Login to ECR
        id: login-ecr  # 다음 단계에서 outputs 참조용 ID
        uses: aws-actions/amazon-ecr-login@v2
      
      # Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        env:
          # login-ecr 단계의 출력값 사용
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # Git 커밋 SHA를 이미지 태그로 사용
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Docker 이미지 빌드
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # ECR에 이미지 푸시
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
      # Parameter Store 업데이트
      - name: Update Parameter Store
        run: |
          # ECR 레지스트리 URL 저장
          aws ssm put-parameter --name "/dev/ecr/registry" --value "${{ steps.login-ecr.outputs.registry }}" --type "String" --overwrite
          # ECR 리포지토리 이름 저장
          aws ssm put-parameter --name "/dev/ecr/repository" --value "${{ env.ECR_REPOSITORY }}" --type "String" --overwrite
          # 이미지 태그 저장
          aws ssm put-parameter --name "/dev/image/tag" --value "${{ github.sha }}" --type "String" --overwrite
      
      # 배포 패키지 생성
      - name: Create deployment package
        # 필요한 파일들을 ZIP으로 압축
        run: zip -r deploy.zip docker-compose-dev.yml appspec.yml scripts/
      
      # S3에 업로드
      - name: Upload to S3
        # 고유한 파일명으로 S3에 업로드 (커밋 SHA 포함)
        run: aws s3 cp deploy.zip s3://tpt-dev-server/dev/deploy-${{ github.sha }}.zip
      
      # CodeDeploy 실행
      - name: Deploy with CodeDeploy
        run: |
          # CodeDeploy 배포 생성
          aws deploy create-deployment \
            --application-name tpt-server \
            --deployment-group-name Develop \
            --s3-location bucket=your-app-deployments,key=dev/deploy-${{ github.sha }}.zip,bundleType=zip